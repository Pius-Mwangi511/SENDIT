// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id           String     @id @default(uuid())
  name         String
  email        String     @unique
  phone        String?
  password     String
  role         Role       @default(USER)
  isVerified   Boolean    @default(false)
  profileImage String? 
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  deletedAt    DateTime?  // soft delete

  sentParcels      Parcel[]       @relation("SenderParcels")
  receivedParcels  Parcel[]       @relation("ReceiverParcels")
  courierParcels   Parcel[]       @relation("CourierParcels")
  notifications    Notification[]
  authTokens       AuthToken[]
}

model Parcel {
  id                   String           @id @default(uuid())
  weight               Float
  category             ParcelCategory
  status               ParcelStatus     @default(PENDING)
  pickupAddress        String
  destinationAddress   String
  pickupLat            Float
  pickupLng            Float
  destinationLat       Float
  destinationLng       Float
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  deletedAt            DateTime?

  senderId             String
  receiverId           String
  courierId            String? 

  sender               User             @relation("SenderParcels", fields: [senderId], references: [id])
  receiver             User             @relation("ReceiverParcels", fields: [receiverId], references: [id])
  courier              User?            @relation("CourierParcels", fields: [courierId], references: [id])
  trackingUpdates      ParcelTracking[]
}

model ParcelTracking {
  id         String    @id @default(uuid())
  parcelId   String
  latitude   Float
  longitude  Float
  location   String
  statusNote String?
  createdAt  DateTime  @default(now())

  parcel     Parcel    @relation(fields: [parcelId], references: [id])
}

model Notification {
  id         String             @id @default(uuid())
  type       NotificationType
  message    String
  userId     String
  read       Boolean            @default(false)
  createdAt  DateTime           @default(now())

  user       User               @relation(fields: [userId], references: [id])
}

model AuthToken {
  id         String     @id @default(uuid())
  token      String     @unique
  userId     String
  type       TokenType
  expiresAt  DateTime
  createdAt  DateTime   @default(now())

  user       User       @relation(fields: [userId], references: [id])
}

enum Role {
  ADMIN
  USER
  COURIER
}

enum ParcelStatus {
  PENDING
  IN_TRANSIT
  DELIVERED
  CANCELLED
}

enum ParcelCategory {
  SMALL
  MEDIUM
  LARGE
  OVERSIZE
}

enum NotificationType {
  STATUS_UPDATE
  WELCOME
  DELIVERY
  SYSTEM
}

enum TokenType {
  RESET_PASSWORD
  VERIFY_EMAIL
}
